import axios from 'axios';

// URLs das APIs
const MEAL_DB_BASE_URL = 'https://www.themealdb.com/api/json/v1/1';
const FACTS_API_URL = 'https://uselessfacts.jsph.pl/api/v2/facts/random?language=en';

// --- Fun√ß√µes da API TheMealDB ---
export const getRandomMeal = async () => {
  try {
    const response = await axios.get(`${MEAL_DB_BASE_URL}/random.php`);
    return response.data.meals ? response.data.meals[0] : null;
  } catch (error) {
    console.error("Erro ao buscar receita aleat√≥ria:", error);
    return null;
  }
};

export const searchMealsByName = async (name) => {
  try {
    if (!name || name.trim() === '') return [];
    const response = await axios.get(`${MEAL_DB_BASE_URL}/search.php?s=${encodeURIComponent(name)}`);
    return response.data.meals || [];
  } catch (error) {
    console.error("Erro ao buscar receitas por nome:", error);
    return [];
  }
};

export const getMealsByCategory = async (category) => {
  try {
    if (!category || category.trim() === '') return [];
    const response = await axios.get(`${MEAL_DB_BASE_URL}/filter.php?c=${encodeURIComponent(category)}`);
    return response.data.meals || [];
  } catch (error) {
    console.error("Erro ao buscar receitas por categoria:", error);
    return [];
  }
};

export const getMealsByArea = async (area) => {
  try {
    if (!area || area.trim() === '') return [];
    const response = await axios.get(`${MEAL_DB_BASE_URL}/filter.php?a=${encodeURIComponent(area)}`);
    return response.data.meals || [];
  } catch (error) {
    console.error("Erro ao buscar receitas por regi√£o:", error);
    return [];
  }
};

export const getMealById = async (id) => {
  try {
    if (!id) return null;
    const response = await axios.get(`${MEAL_DB_BASE_URL}/lookup.php?i=${id}`);
    return response.data.meals ? response.data.meals[0] : null;
  } catch (error) {
    console.error("Erro ao buscar receita por ID:", error);
    return null;
  }
};

export const getAllCategories = async () => {
  try {
    const response = await axios.get(`${MEAL_DB_BASE_URL}/categories.php`);
    return response.data.categories || [];
  } catch (error) {
    console.error("Erro ao buscar categorias:", error);
    return [];
  }
};

export const getAllAreas = async () => {
  try {
    const response = await axios.get(`${MEAL_DB_BASE_URL}/list.php?a=list`);
    return response.data.meals || [];
  } catch (error) {
    console.error("Erro ao buscar √°reas:", error);
    return [];
  }
};

export const getAllIngredients = async () => {
  try {
    const response = await axios.get(`${MEAL_DB_BASE_URL}/list.php?i=list`);
    return response.data.meals || [];
  } catch (error) {
    console.error("Erro ao buscar ingredientes:", error);
    return [];
  }
};

// --- Fun√ß√£o para dicas di√°rias (vers√£o melhorada) ---
export const getDailyTip = async () => {
  try {
    // Primeiro tenta buscar uma receita aleat√≥ria
    const randomMeal = await getRandomMeal();
    if (randomMeal) {
      const mealName = randomMeal.strMeal;
      const mealArea = randomMeal.strArea;
      const mealCategory = randomMeal.strCategory;
      
      return `üçΩÔ∏è Dica Culin√°ria de Hoje: Que tal experimentar ${mealName}? √â uma deliciosa especialidade ${mealArea} da categoria ${mealCategory}! Experimente algo novo hoje! üë®‚Äçüç≥`;
    }
    
    // Se n√£o conseguir receita, usa fato aleat√≥rio
    const response = await axios.get(FACTS_API_URL);
    const fact = response.data.text;
    
    return `üí° Curiosidade do Dia: ${fact}`;
  } catch (error) {
    console.error("Erro ao buscar dica di√°ria:", error);
    return getRandomCookingTip();
  }
};

// --- Fun√ß√£o apenas para fatos aleat√≥rios ---
export const getRandomFact = async () => {
  try {
    const response = await axios.get(FACTS_API_URL);
    return response.data.text;
  } catch (error) {
    console.error("Erro ao buscar fato aleat√≥rio:", error);
    return "N√£o foi poss√≠vel carregar o fato de hoje. Tente novamente mais tarde.";
  }
};

// --- Fun√ß√£o para dicas culin√°rias pr√©-definidas (fallback) ---
const getRandomCookingTip = () => {
  const cookingTips = [
    "üßÇ Dica do Chef: Sempre tempere a √°gua do macarr√£o com sal grosso - isso faz toda a diferen√ßa no sabor final!",
    "ü•© Segredo Culin√°rio: Deixe a carne descansar em temperatura ambiente por 30 minutos antes de cozinhar para um resultado mais uniforme.",
    "üçÖ Truque da Vov√≥: Adicione uma pitada de a√ß√∫car ao molho de tomate para equilibrar a acidez natural.",
    "ü•ö Dica Profissional: Use uma colher de sopa de vinagre branco na √°gua para fazer ovos poch√™ perfeitos.",
    "üçû Segredo do Padeiro: √Ågua morna (n√£o quente!) √© ideal para ativar o fermento sem mat√°-lo.",
    "üßÑ Truque Culin√°rio: Para tirar o cheiro de alho das m√£os, esfregue-as em uma colher de a√ßo inoxid√°vel.",
    "ü•ò Dica Master: Refogue sempre a cebola at√© ficar transparente antes de adicionar outros ingredientes.",
    "üßä Segredo dos Chefs: Gelo na frigideira quente testa a temperatura ideal para carnes e peixes.",
    "üåø Dica Verde: Ervas frescas devem ser adicionadas no final do cozimento para preservar o sabor.",
    "üî• Truque do Fogo: Cozinhe sempre com a panela tampada para economizar energia e cozinhar mais r√°pido!"
  ];
  
  const randomIndex = Math.floor(Math.random() * cookingTips.length);
  return cookingTips[randomIndex];
};

// --- Fun√ß√£o para buscar receitas por ingrediente ---
export const getMealsByIngredient = async (ingredient) => {
  try {
    if (!ingredient || ingredient.trim() === '') return [];
    const response = await axios.get(`${MEAL_DB_BASE_URL}/filter.php?i=${encodeURIComponent(ingredient)}`);
    return response.data.meals || [];
  } catch (error) {
    console.error("Erro ao buscar receitas por ingrediente:", error);
    return [];
  }
};

// --- Fun√ß√£o para buscar m√∫ltiplas receitas aleat√≥rias ---
export const getMultipleRandomMeals = async (count = 3) => {
  try {
    const promises = [];
    for (let i = 0; i < count; i++) {
      promises.push(getRandomMeal());
    }
    
    const results = await Promise.all(promises);
    return results.filter(meal => meal !== null);
  } catch (error) {
    console.error("Erro ao buscar receitas aleat√≥rias:", error);
    return [];
  }
};

// --- Fun√ß√£o utilit√°ria para extrair ingredientes formatados ---
export const formatMealIngredients = (meal) => {
  if (!meal) return [];
  
  const ingredients = [];
  for (let i = 1; i <= 20; i++) {
    const ingredient = meal[`strIngredient${i}`];
    const measure = meal[`strMeasure${i}`];
    
    if (ingredient && ingredient.trim()) {
      const formattedIngredient = measure && measure.trim() 
        ? `${measure.trim()} ${ingredient.trim()}`
        : ingredient.trim();
      ingredients.push(formattedIngredient);
    }
  }
  
  return ingredients;
};

// --- Fun√ß√£o para verificar se a API est√° funcionando ---
export const checkAPIHealth = async () => {
  try {
    const startTime = Date.now();
    
    // Testa TheMealDB
    const mealResponse = await axios.get(`${MEAL_DB_BASE_URL}/random.php`);
    const mealDB = mealResponse.status === 200;
    
    // Testa Facts API
    const factsResponse = await axios.get(FACTS_API_URL);
    const factsAPI = factsResponse.status === 200;
    
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    return {
      mealDB,
      factsAPI,
      responseTime: `${responseTime}ms`,
      status: mealDB && factsAPI ? 'healthy' : 'partial',
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error("Erro ao verificar status das APIs:", error);
    return {
      mealDB: false,
      factsAPI: false,
      responseTime: 'timeout',
      status: 'down',
      timestamp: new Date().toISOString(),
      error: error.message
    };
  }
};

// Exporta√ß√£o default com todas as fun√ß√µes
const ExternalAPIService = {
  // TheMealDB
  getRandomMeal,
  searchMealsByName,
  getMealsByCategory,
  getMealsByArea,
  getMealsByIngredient,
  getMealById,
  getAllCategories,
  getAllAreas,
  getAllIngredients,
  getMultipleRandomMeals,
  
  // Dicas e fatos
  getDailyTip,
  getRandomFact,
  
  // Utilit√°rios
  formatMealIngredients,
  checkAPIHealth
};

export default ExternalAPIService;